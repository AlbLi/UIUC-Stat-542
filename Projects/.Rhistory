knitr::opts_chunk$set(echo = TRUE)
install.packages("Recommenderlab")
Y
yes
install.packages("recommenderlab")
library(recommenderlab)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
i = paste0('u', ratings$UserID)
j = paste0('m', ratings$MovieID)
x = ratings$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
train = Rmat[1:500, ]
test = Rmat[501, ]
train
recommender.UBCF <- Recommender(train, method = "UBCF",
parameter = list(normalize = 'center',
method = 'Cosine',
nn = 20))
p.UBCF <- predict(recommender.UBCF, test, type="ratings")
p.UBCF <- as.numeric(as(p.UBCF, "matrix"))
sum(is.na(p.UBCF) != is.na(mypred)) ### should be zero
recommender.IBCF <- Recommender(train, method = "IBCF",
parameter = list(normalize = 'center',
method = 'Cosine',
k = 30))
p.IBCF <- predict(recommender.IBCF, test, type="ratings")
p.IBCF <- as.numeric(as(p.IBCF, "matrix"))
p.IBCF
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(astsa))
suppressMessages(library(fGarch))
suppressMessages(library(fpp2))
suppressMessages(library(latex2exp))
suppressMessages(library(tidyverse))
suppressMessages(library(TSA))
suppressMessages(library(tseries))
suppressMessages(library(xts))
library(astsa)
library(fGarch)
library(fpp2)
library(latex2exp)
library(tidyverse)
library(TSA)
library(tseries)
library(xts)
library(xtable)
#Custom Function for Creating Training and Testing Data
ts.train.test <- function(data, freq, p = 0.75){
total.length = length(data)
#Splitting up the Data
test.length = round(total.length * (1 - p), 0)
train.length = total.length - test.length
data.test = data[train.length:total.length]
data.train = data[1:(train.length - 1)]
#Coercing the data into time series format
data.test = ts(data.test, start = time(data)[train.length], frequency = freq)
data.train = ts(data.train, start = time(data)[1], frequency = freq)
#Returning a list of the training and testing data
x = list(data.train, data.test)
names(x) <- c("train","test")
return(x)
}
#Custom Function for Calculating RMSE
tsRMSE <- function(data, freq, prob = 0.75, p = 0, d = 0, q = 0, P = 0, D = 0, Q = 0, S = 1){
#Creating the training and testing splits
train = ts.train.test(data, freq, p = prob)$train
test = ts.train.test(data, freq, p = prob)$test
#Forecast modeling
model = sarima.for(train, p, d, q, P, D, Q, S, no.constant = TRUE,
n.ahead = length(test), plot = FALSE)
#RMSE Calculations
RMSE = sqrt(mean((model$pred - as.numeric(test))^2))
RMSE1.5 = sqrt(mean((model$pred[1:5] - as.numeric(test[1:5]))^2))
#Returning a list of the RMSE values
x = list(RMSE, RMSE1.5)
names(x) <- c("RMSE", "RMSE Obs. 1:5")
return(x)
}
#Custom Function for Calculating RMSE for GARCH
garchRMSE <- function(data, freq, prob = 0.75, p = 0, q = 0, alpha = 0, beta = 0){
#Creating the training and testing splits
train = ts.train.test(data, freq, p = prob)$train
test = ts.train.test(data, freq, p = prob)$test
#Forecast modeling
model = garchFit(substitute(~arma(p,q) + garch(alpha, beta)), train)
pred = predict(model, n.ahead = length(test))
#RMSE Calculations
RMSE = sqrt(mean((as.numeric(pred$meanForecast) - as.numeric(test))^2))
RMSE1.5 = sqrt(mean((as.numeric(pred$meanForecast[1:5]) - as.numeric(test[1:5]))^2))
#Returning a list of the RMSE values
x = list(RMSE, RMSE1.5)
names(x) <- c("RMSE", "RMSE Obs. 1:5")
return(x)
}
#Paul PC
#Beijing <- read.csv("~/Classes/STAT429 (UIUC)/Project/Data Sets/BeijingPM20100101_20151231.csv",
#                    stringsAsFactors=TRUE)
#Paul MacOS
Beijing <- read.csv("BeijingPM20100101_20151231.csv", stringsAsFactors=TRUE)
#Going by each recording station
Dongsi = Beijing %>% drop_na(PM_Dongsi)
Dongsihuan = Beijing %>% drop_na(PM_Dongsihuan)
Nongzhanguan = Beijing %>% drop_na(PM_Nongzhanguan)
USPost = Beijing %>% drop_na(PM_US.Post)
#Looking for Columns with NA
result = data.frame(matrix(data = rep(0,5*ncol(Beijing)), nrow = ncol(Beijing)))
for(i in 1:ncol(Beijing)){
result[i,1] = any(is.na(Beijing[,i]))
result[i,2] = any(is.na(Dongsi[,i]))
result[i,3] = any(is.na(Dongsihuan[,i]))
result[i,4] = any(is.na(Nongzhanguan[,i]))
result[i,5] = any(is.na(USPost[,i]))
}
#Outputting Results
#Each row is a column in the data while the columns represent the data sets.
result = result %>% rename(Beijing = "X1") %>% rename(Dongsi = "X2") %>%
rename(Dongsihuan = "X3") %>% rename(Nongzhanguan = "X4") %>%
rename(USPost = "X5") %>%
mutate(Beijing = ifelse(Beijing == 0, "No", "Yes")) %>%
mutate(Dongsi = ifelse(Dongsi == 0, "No", "Yes")) %>%
mutate(Dongsihuan = ifelse(Dongsihuan == 0, "No", "Yes")) %>%
mutate(Nongzhanguan = ifelse(Nongzhanguan == 0, "No", "Yes")) %>%
mutate(USPost = ifelse(USPost == 0, "No", "Yes"))
rownames(result) = colnames(Beijing)
result
#Dongsi
Dongsi$Date = as.Date(with(Dongsi,paste(day,month,year,sep = "-")), "%d-%m-%Y")
Dongsi$Recorded = as.POSIXct(paste(Dongsi$Date, Dongsi$hour), format = "%Y-%m-%d %H")
Dongsi = Dongsi %>%
select(Date, Recorded, season, PM_Dongsi, DEWP, HUMI, PRES, TEMP, cbwd, Iws, precipitation,
Iprec)
#Dongsihuan
Dongsihuan$Date = as.Date(with(Dongsihuan,paste(day,month,year,sep = "-")), "%d-%m-%Y")
Dongsihuan$Recorded = as.POSIXct(paste(Dongsihuan$Date, Dongsihuan$hour), format = "%Y-%m-%d %H")
Dongsihuan = Dongsihuan %>%
select(Date, Recorded, season, PM_Dongsihuan, DEWP, HUMI, PRES, TEMP, cbwd, Iws, precipitation,
Iprec)
#Nongzhanguan
Nongzhanguan$Date = as.Date(with(Nongzhanguan,paste(day,month,year,sep = "-")), "%d-%m-%Y")
Nongzhanguan$Recorded = as.POSIXct(paste(Nongzhanguan$Date, Nongzhanguan$hour),
format = "%Y-%m-%d %H")
Nongzhanguan = Nongzhanguan %>%
select(Date, Recorded, season, PM_Nongzhanguan, DEWP, HUMI, PRES, TEMP, cbwd, Iws, precipitation,
Iprec)
#US Post
USPost$Date = as.Date(with(USPost,paste(day,month,year,sep = "-")), "%d-%m-%Y")
USPost$Recorded = as.POSIXct(paste(USPost$Date, USPost$hour), format = "%Y-%m-%d %H")
USPost = USPost %>%
select(Date, Recorded, season, PM_US.Post, DEWP, HUMI, PRES, TEMP, cbwd, Iws, precipitation,
Iprec)
#Sub-setting the aggregated mean PM 2.5 readings for each day in the four locations.
D = aggregate(PM_Dongsi ~ Date, Dongsi, mean)
DS = aggregate(PM_Dongsihuan ~ Date, Dongsihuan, mean)
N = aggregate(PM_Nongzhanguan ~ Date, Nongzhanguan, mean)
US = aggregate(PM_US.Post ~ Date, USPost, mean)
#Dongsi
tsplot(D$Date, D$PM_Dongsi, type = "l", xlab = "Date Recorded",
ylab = TeX(r"(PM2.5 Concentrate; $\mu g/m^3$)"), main = "Dongsi")
#Dongsihuan
tsplot(DS$Date, DS$PM_Dongsihuan, type = "l", xlab = "Date Recorded",
ylab = TeX(r"(PM2.5 Concentrate; $\mu g/m^3$)"), main = "Dongsihuan")
#Nongzhanguan
tsplot(N$Date, N$PM_Nongzhanguan, type = "l", xlab = "Date Recorded",
ylab = TeX(r"(PM2.5 Concentrate; $\mu g/m^3$)"), main = "Nongzhanguan")
#US Post
tsplot(US$Date, US$PM_US.Post, type = "l", xlab = "Date Recorded",
ylab = TeX(r"(PM2.5 Concentrate; $\mu g/m^3$)"), main = "US Post")
#Dongsi
periodogram(D$PM_Dongsi, main = "Dongsi")
#Dongsihuan
periodogram(DS$PM_Dongsihuan, main = "Dongsihuan")
#Nongzhanguan
periodogram(N$PM_Nongzhanguan, main = "Nongzhanguan")
#US Post
periodogram(US$PM_US.Post, main = "US Post")
#Smoothed Periodogram
smooth = mvspec(D$PM_Dongsi, spans = 15, col = "blue", lwd = 2)
#Determining Optimal Frequencies
freq = data.frame(smooth$freq, smooth$spec)
freq = freq %>% rename(Frequency = "smooth.freq") %>% rename(Spectrum = "smooth.spec") %>%
arrange(desc(Spectrum)) %>% filter(Spectrum >= 15000) %>% mutate(Cycle_Days = 1/Frequency)
freq
#Sub-setting the aggregated mean PM 2.5 readings for each day in the four locations.
D = aggregate(PM_Dongsi ~ Date, Dongsi, mean)
DS = aggregate(PM_Dongsihuan ~ Date, Dongsihuan, mean)
N = aggregate(PM_Nongzhanguan ~ Date, Nongzhanguan, mean)
US = aggregate(PM_US.Post ~ Date, USPost, mean)
plot(Dongsi$PM_Dongsi)
tsplot(Dongsi$PM_Dongsi)
Rmat
head(Rmat,10)
calcPredictionAccuracy(p.UBCF, test)
recommender.UBCF <- Recommender(train, method = "UBCF",
parameter = list(normalize = 'center',
method = 'Cosine',
nn = 20))
p.UBCF <- predict(recommender.UBCF, test, type="ratings")
calcPredictionAccuracy(p.UBCF, test)
install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
get_user_ratings = function(value_list) {
dat = data.table(MovieID = sapply(strsplit(names(value_list), "_"),
function(x) ifelse(length(x) > 1, x[[2]], NA)),
Rating = unlist(as.character(value_list)))
dat = dat[!is.null(Rating) & !is.na(MovieID)]
dat[Rating == " ", Rating := 0]
dat[, ':=' (MovieID = as.numeric(MovieID), Rating = as.numeric(Rating))]
dat = dat[Rating > 0]
}
# read in data
myurl = "https://liangfgithub.github.io/MovieData/"
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
shinyServer(function(input, output, session) {
# show the books to be rated
output$ratings <- renderUI({
num_rows <- 20
num_movies <- 6 # movies per row
lapply(1:num_rows, function(i) {
list(fluidRow(lapply(1:num_movies, function(j) {
list(box(width = 2,
div(style = "text-align:center", img(src = movies$image_url[(i - 1) * num_movies + j], height = 150)),
#div(style = "text-align:center; color: #999999; font-size: 80%", books$authors[(i - 1) * num_books + j]),
div(style = "text-align:center", strong(movies$Title[(i - 1) * num_movies + j])),
div(style = "text-align:center; font-size: 150%; color: #f0ad4e;", ratingInput(paste0("select_", movies$MovieID[(i - 1) * num_movies + j]), label = "", dataStop = 5)))) #00c0ef
})))
})
})
# Calculate recommendations when the sbumbutton is clicked
df <- eventReactive(input$btn, {
withBusyIndicatorServer("btn", { # showing the busy indicator
# hide the rating container
useShinyjs()
jsCode <- "document.querySelector('[data-widget=collapse]').click();"
runjs(jsCode)
# get the user's rating data
value_list <- reactiveValuesToList(input)
user_ratings <- get_user_ratings(value_list)
user_results = (1:10)/10
user_predicted_ids = 1:10
recom_results <- data.table(Rank = 1:10,
MovieID = movies$MovieID[user_predicted_ids],
Title = movies$Title[user_predicted_ids],
Predicted_rating =  user_results)
}) # still busy
}) # clicked on button
# display the recommendations
output$results <- renderUI({
num_rows <- 2
num_movies <- 5
recom_result <- df()
lapply(1:num_rows, function(i) {
list(fluidRow(lapply(1:num_movies, function(j) {
box(width = 2, status = "success", solidHeader = TRUE, title = paste0("Rank ", (i - 1) * num_movies + j),
div(style = "text-align:center",
a(img(src = movies$image_url[recom_result$MovieID[(i - 1) * num_movies + j]], height = 150))
),
div(style="text-align:center; font-size: 100%",
strong(movies$Title[recom_result$MovieID[(i - 1) * num_movies + j]])
)
)
}))) # columns
}) # rows
}) # renderUI function
}) # server function
devtools::install_github("stefanwilhelm/ShinyRatingInput")
get_user_ratings = function(value_list) {
dat = data.table(MovieID = sapply(strsplit(names(value_list), "_"),
function(x) ifelse(length(x) > 1, x[[2]], NA)),
Rating = unlist(as.character(value_list)))
dat = dat[!is.null(Rating) & !is.na(MovieID)]
dat[Rating == " ", Rating := 0]
dat[, ':=' (MovieID = as.numeric(MovieID), Rating = as.numeric(Rating))]
dat = dat[Rating > 0]
}
install.packages("devtools")
install.packages("devtools")
#install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
force=TRUE
#install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput",force=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(recommenderlab)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
i = paste0('u', ratings$UserID)
j = paste0('m', ratings$MovieID)
x = ratings$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
train = Rmat[1:500, ]
test = Rmat[501, ]
names(Rmat)
ncol(Rmat)
#Creating mypred with UBCF method
train = Rmat[1:500, ] > test = Rmat[501, ] > data = as(train, "matrix") > user.means = rowMeans(data, na.rm = TRUE) > data = data - user.means > newdata = as(Rmat[501, ], "matrix") > newuser.mean = mean(newdata, na.rm = TRUE) > newdata = newdata - newuser.mean
#Creating mypred with UBCF method
train = Rmat[1:500, ] > test = Rmat[501, ] > data = as(train, "matrix") > user.means = rowMeans(data, na.rm = TRUE) > data = data - user.means > newdata = as(Rmat[501, ], "matrix") > newuser.mean = mean(newdata, na.rm = TRUE) > newdata = newdata - newuser.mean
#Creating mypred with UBCF method
train = Rmat[1:500, ] > test = Rmat[501, ]
#Creating mypred with UBCF method
train = Rmat[1:500, ]
test = Rmat[501, ]
data = as(train, "matrix")
user.means = rowMeans(data, na.rm = TRUE)
data = data - user.means
newdata = as(Rmat[501, ], "matrix")
newuser.mean = mean(newdata, na.rm = TRUE)
newdata = newdata - newuser.mean
newdata
View(newdata)
sim1 = proxy::simil(data, newdata, method = "cosine")
sim1 = (1 + sim1)/2 > sum((sim - sim1)^2)
sim = rep(0, dim(data)[1])
for(i in 1:length(sim)) {
tmp.y = as.vector(newdata)
ind.y = which(!is.na(tmp.y))
tmp.x = data[i, ]
ind.x = which(!is.na(tmp.x))
ind  = intersect(ind.x, ind.y)
if (length(ind) > 0){
tmp.x = tmp.x[ind]
tmp.y = tmp.y[ind]
sim[i] = sum(tmp.x * tmp.y) / sqrt(sum(tmp.x^2) * sum(tmp.y^2))
}
}
sim1 = proxy::simil(data, newdata, method = "cosine")
sim1 = (1 + sim1)/2 > sum((sim - sim1)^2)
View(sim1)
table(sim1)
sum((sim - sim1)^2)
#Creating mypred with UBCF method
train = Rmat[1:500, ]
test = Rmat[501, ]
data = as(train, "matrix")
user.means = rowMeans(data, na.rm = TRUE)
data = data - user.means
newdata = as(Rmat[501, ], "matrix")
newuser.mean = mean(newdata, na.rm = TRUE)
newdata = newdata - newuser.mean
sim = proxy::simil(data, newdata, method = "cosine")
sim = (1 + sim)/2
#sum((sim - sim1)^2)
#sum((sim - sim1)^2)
length(sim)
range(sim)
num = colSums(train * sim,na.rm = TRUE)
num = colSums(data * sim,na.rm = TRUE)
num = colSums(data * as.vector(sim),na.rm = TRUE)
num
den = colSums(!is.na(data) * as.vector(sim),na.rm = TRUE)
num/den
mypred=num/den
range(mypred)
?NaN
mypred[is.nan(mypred)]<-NA
which(is.na(newuser))
which(is.na(newdata))
dim(newdata)
mypred[!is.na(newdata)]<-NA
num = colSums(data * as.vector(sim),na.rm = TRUE)
den = colSums(!is.na(data) * as.vector(sim),na.rm = TRUE)
mypred=num/den
mypred[is.nan(mypred)]<-NA
mypred[!is.na(newdata)]<-NA
recommender.UBCF <- Recommender(train, method = "UBCF",
parameter = list(normalize = 'center',
method = 'Cosine',
nn = 20))
p.UBCF <- predict(recommender.UBCF, test, type="ratings")
p.UBCF <- as.numeric(as(p.UBCF, "matrix"))
sum(is.na(p.UBCF) != is.na(mypred)) ### should be zero
max(abs(p.UBCF - mypred), na.rm = TRUE)  ### should be less than 1e-06
order(sim,20)
order(sim)
ids<-order(sim)[1:20]
sim[ids]
ids<-order(sim,decreasing=TRUE)[1:20]
sim[ids]
sim-sim[ids]
sim[-ids]<-NA
num = colSums(data * as.vector(sim),na.rm = TRUE)
den = colSums(!is.na(data) * as.vector(sim),na.rm = TRUE)
mypred=num/den
mypred[is.nan(mypred)]<-NA
mypred[!is.na(newdata)]<-NA
sum(is.na(p.UBCF) != is.na(mypred)) ### should be zero
max(abs(p.UBCF - mypred), na.rm = TRUE)  ### should be less than 1e-06
mypred+=newuser.mean
mypred=mypred+newuser.mean
sum(is.na(p.UBCF) != is.na(mypred)) ### should be zero
max(abs(p.UBCF - mypred), na.rm = TRUE)  ### should be less than 1e-06
library(recommenderlab)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
i = paste0('u', ratings$UserID)
j = paste0('m', ratings$MovieID)
x = ratings$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
train = Rmat[1:500, ]
test = Rmat[501, ]
#Creating mypred with UBCF method
train = Rmat[1:500, ]
test = Rmat[501, ]
data = as(train, "matrix")
user.means = rowMeans(data, na.rm = TRUE)
data = data - user.means
newdata = as(Rmat[501, ], "matrix")
newuser.mean = mean(newdata, na.rm = TRUE)
newdata = newdata - newuser.mean
sim = proxy::simil(data, newdata, method = "cosine")
sim = (1 + sim)/2
ids<-order(sim,decreasing=TRUE)[1:20]
sim[-ids]<-NA
#sum((sim - sim1)^2)
#sum((sim - sim1)^2)
num = colSums(data * as.vector(sim),na.rm = TRUE)
den = colSums(!is.na(data) * as.vector(sim),na.rm = TRUE)
mypred=num/den
mypred[is.nan(mypred)]<-NA
mypred[!is.na(newdata)]<-NA
mypred=mypred+newuser.mean
recommender.UBCF <- Recommender(train, method = "UBCF",
parameter = list(normalize = 'center',
method = 'Cosine',
nn = 20))
p.UBCF <- predict(recommender.UBCF, test, type="ratings")
p.UBCF <- as.numeric(as(p.UBCF, "matrix"))
sum(is.na(p.UBCF) != is.na(mypred)) ### should be zero
max(abs(p.UBCF - mypred), na.rm = TRUE)  ### should be less than 1e-06
cbind(mypred, p.UBCF)[1:20, ]
newuser.mean
sim = proxy::simil(data, newdata, method = "cosine")
sim = (1 + sim)/2
ids<-order(sim,decreasing=TRUE)[1:20]
sim[ids]
sim[-ids]<-NA
sim[ids]
sim[1:10]
mode(sim)
junk = as.vector(sim)
junk[1:10]
junk[ids]
num = colSums(data * as.vector(sim),na.rm = TRUE)
den = colSums(!is.na(data) * as.vector(sim),na.rm = TRUE)
mypred=num/den
mypred[1:10]
mypred=mypred+newuser.mean
mypred[is.nan(mypred)]<-NA
mypred[!is.na(newdata)]<-NA
sum(is.na(p.UBCF) != is.na(mypred)) ### should be zero
max(abs(p.UBCF - mypred), na.rm = TRUE)  ### should be less than 1e-06
cbind(mypred, p.UBCF)[1:20, ]
junk = !is.na(data)
junk[1:5, 1:5]
num = colSums(data * as.vector(sim),na.rm = TRUE)
den = colSums((!is.na(data)) * as.vector(sim),na.rm = TRUE)
mypred=num/den
mypred=mypred+newuser.mean
mypred[is.nan(mypred)]<-NA
mypred[!is.na(newdata)]<-NA
sum(is.na(p.UBCF) != is.na(mypred)) ### should be zero
max(abs(p.UBCF - mypred), na.rm = TRUE)  ### should be less than 1e-06
