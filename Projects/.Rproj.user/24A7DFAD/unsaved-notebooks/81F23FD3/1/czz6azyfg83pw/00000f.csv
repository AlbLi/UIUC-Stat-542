"0","get_user_ratings = function(value_list) {"
"0","  dat = data.table(MovieID = sapply(strsplit(names(value_list), ""_""), "
"0","                                    function(x) ifelse(length(x) > 1, x[[2]], NA)),"
"0","                    Rating = unlist(as.character(value_list)))"
"0","  dat = dat[!is.null(Rating) & !is.na(MovieID)]"
"0","  dat[Rating == "" "", Rating := 0]"
"0","  dat[, ':=' (MovieID = as.numeric(MovieID), Rating = as.numeric(Rating))]"
"0","  dat = dat[Rating > 0]"
"0","}"
"0",""
"0","# read in data"
"0","myurl = ""https://liangfgithub.github.io/MovieData/"""
"0","movies = readLines(paste0(myurl, 'movies.dat?raw=true'))"
"0","movies = strsplit(movies, split = ""::"", fixed = TRUE, useBytes = TRUE)"
"0","movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)"
"0","movies = data.frame(movies, stringsAsFactors = FALSE)"
"0","colnames(movies) = c('MovieID', 'Title', 'Genres')"
"0","movies$MovieID = as.integer(movies$MovieID)"
"0","movies$Title = iconv(movies$Title, ""latin1"", ""UTF-8"")"
"0",""
"0","small_image_url = ""https://liangfgithub.github.io/MovieImages/"""
"0","movies$image_url = sapply(movies$MovieID, "
"0","                          function(x) paste0(small_image_url, x, '.jpg?raw=true'))"
"0",""
"0","shinyServer(function(input, output, session) {"
"0","  "
"0","  # show the books to be rated"
"0","  output$ratings <- renderUI({"
"0","    num_rows <- 20"
"0","    num_movies <- 6 # movies per row"
"0","    "
"0","    lapply(1:num_rows, function(i) {"
"0","      list(fluidRow(lapply(1:num_movies, function(j) {"
"0","        list(box(width = 2,"
"0","                 div(style = ""text-align:center"", img(src = movies$image_url[(i - 1) * num_movies + j], height = 150)),"
"0","                 #div(style = ""text-align:center; color: #999999; font-size: 80%"", books$authors[(i - 1) * num_books + j]),"
"0","                 div(style = ""text-align:center"", strong(movies$Title[(i - 1) * num_movies + j])),"
"0","                 div(style = ""text-align:center; font-size: 150%; color: #f0ad4e;"", ratingInput(paste0(""select_"", movies$MovieID[(i - 1) * num_movies + j]), label = """", dataStop = 5)))) #00c0ef"
"0","      })))"
"0","    })"
"0","  })"
"0","  "
"0","  # Calculate recommendations when the sbumbutton is clicked"
"0","  df <- eventReactive(input$btn, {"
"0","    withBusyIndicatorServer(""btn"", { # showing the busy indicator"
"0","        # hide the rating container"
"0","        useShinyjs()"
"0","        jsCode <- ""document.querySelector('[data-widget=collapse]').click();"""
"0","        runjs(jsCode)"
"0","        "
"0","        # get the user's rating data"
"0","        value_list <- reactiveValuesToList(input)"
"0","        user_ratings <- get_user_ratings(value_list)"
"0","        "
"0","        user_results = (1:10)/10"
"0","        user_predicted_ids = 1:10"
"0","        recom_results <- data.table(Rank = 1:10, "
"0","                                    MovieID = movies$MovieID[user_predicted_ids], "
"0","                                    Title = movies$Title[user_predicted_ids], "
"0","                                    Predicted_rating =  user_results)"
"0","        "
"0","    }) # still busy"
"0","    "
"0","  }) # clicked on button"
"0","  "
"0",""
"0","  # display the recommendations"
"0","  output$results <- renderUI({"
"0","    num_rows <- 2"
"0","    num_movies <- 5"
"0","    recom_result <- df()"
"0","    "
"0","    lapply(1:num_rows, function(i) {"
"0","      list(fluidRow(lapply(1:num_movies, function(j) {"
"0","        box(width = 2, status = ""success"", solidHeader = TRUE, title = paste0(""Rank "", (i - 1) * num_movies + j),"
"0","            "
"0","          div(style = ""text-align:center"", "
"0","              a(img(src = movies$image_url[recom_result$MovieID[(i - 1) * num_movies + j]], height = 150))"
"0","             ),"
"0","          div(style=""text-align:center; font-size: 100%"", "
"0","              strong(movies$Title[recom_result$MovieID[(i - 1) * num_movies + j]])"
"0","             )"
"0","          "
"0","        )        "
"0","      }))) # columns"
"0","    }) # rows"
"0","    "
"0","  }) # renderUI function"
"0","  "
"0","}) # server function"
"2","Error in shinyServer(function(input, output, session) { : 
  could not find function ""shinyServer""
"
