"0","#Custom Function for Creating Training and Testing Data"
"0","ts.train.test <- function(data, freq, p = 0.75){"
"0","total.length = length(data)"
"0","#Splitting up the Data"
"0","test.length = round(total.length * (1 - p), 0)"
"0","train.length = total.length - test.length"
"0","data.test = data[train.length:total.length]"
"0","data.train = data[1:(train.length - 1)]"
"0","#Coercing the data into time series format"
"0","data.test = ts(data.test, start = time(data)[train.length], frequency = freq)"
"0","data.train = ts(data.train, start = time(data)[1], frequency = freq)"
"0","#Returning a list of the training and testing data"
"0","x = list(data.train, data.test)"
"0","names(x) <- c(""train"",""test"")"
"0","return(x)"
"0","}"
"0","#Custom Function for Calculating RMSE"
"0","tsRMSE <- function(data, freq, prob = 0.75, p = 0, d = 0, q = 0, P = 0, D = 0, Q = 0, S = 1){"
"0","  #Creating the training and testing splits"
"0","  train = ts.train.test(data, freq, p = prob)$train"
"0","  test = ts.train.test(data, freq, p = prob)$test"
"0","  #Forecast modeling"
"0","  model = sarima.for(train, p, d, q, P, D, Q, S, no.constant = TRUE, "
"0","                     n.ahead = length(test), plot = FALSE)"
"0","  #RMSE Calculations"
"0","  RMSE = sqrt(mean((model$pred - as.numeric(test))^2))"
"0","  RMSE1.5 = sqrt(mean((model$pred[1:5] - as.numeric(test[1:5]))^2))"
"0","  #Returning a list of the RMSE values"
"0","  x = list(RMSE, RMSE1.5)"
"0","  names(x) <- c(""RMSE"", ""RMSE Obs. 1:5"")"
"0","  return(x)"
"0","}"
"0","#Custom Function for Calculating RMSE for GARCH"
"0","garchRMSE <- function(data, freq, prob = 0.75, p = 0, q = 0, alpha = 0, beta = 0){"
"0","  #Creating the training and testing splits"
"0","  train = ts.train.test(data, freq, p = prob)$train"
"0","  test = ts.train.test(data, freq, p = prob)$test"
"0","  #Forecast modeling"
"0","  model = garchFit(substitute(~arma(p,q) + garch(alpha, beta)), train)"
"0","  pred = predict(model, n.ahead = length(test))"
"0","  #RMSE Calculations"
"0","  RMSE = sqrt(mean((as.numeric(pred$meanForecast) - as.numeric(test))^2))"
"0","  RMSE1.5 = sqrt(mean((as.numeric(pred$meanForecast[1:5]) - as.numeric(test[1:5]))^2))"
"0","  #Returning a list of the RMSE values"
"0","  x = list(RMSE, RMSE1.5)"
"0","  names(x) <- c(""RMSE"", ""RMSE Obs. 1:5"")"
"0","  return(x)"
"0","}"
